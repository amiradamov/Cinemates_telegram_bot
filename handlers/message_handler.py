# handlers/message_handler.py

import random
from telegram import Update
from telegram.ext import ContextTypes
from utils.fetch_movie_data import fetch_top_movies_by_genre, fetch_movie_data
from utils.download_and_upload import upload_images_and_send_message_1
from utils.download_and_upload_top_posters import upload_images_and_send_message

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        title, year = map(str.strip, text.split(','))
        movie_data = fetch_movie_data(title, year)

        if movie_data:
            await upload_images_and_send_message_1(update, movie_data, context)
        else:
            await update.message.reply_text('–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.')
    except ValueError:
        await update.message.reply_text('–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–Ω–∞–∑–≤–∞–Ω–∏–µ, –≥–æ–¥".')


import random

# handler for top movies by genre
async def handle_top_movies_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        _, genre = text.split(maxsplit=1)
        genre = genre.strip().capitalize()

        # Check if 'Random' is specified in the genre
        is_random = genre.startswith("Random")

        genre_mapping = {
            'Action': 28, 'Adventure': 12, 'Animation': 16, 'Comedy': 35, 'Crime': 80,
            'Documentary': 99, 'Drama': 18, 'Family': 10751, 'Fantasy': 14, 'History': 36,
            'Horror': 27, 'Music': 10402, 'Mystery': 9648, 'Romance': 10749,
            'Science Fiction': 878, 'Thriller': 53, 'War': 10752, 'Western': 37
        }

        genre_id = genre_mapping.get(genre) if not is_random else None
        movies = fetch_top_movies_by_genre(genre_id)

        if movies:
            movie_data_list = []
            for movie in movies:
                title_en = movie['title']
                year = movie['release_date'][:4]  # Extract year
                movie_data = fetch_movie_data(title_en, year)  # Fetch detailed movie data
                
                if movie_data:
                    movie_data_list.append(movie_data)

            if movie_data_list:
                await upload_images_and_send_message(update, movies, context)

                # Define headers for English and Russian
                headers_en = [
                    f"üé¨ Discover the Best of {genre} Cinema, Curated by Movie Fans!",
                    f"üçø Top-Rated {genre} Movies You Can't Miss, Selected by the Audience!",
                    f"üé• Dive into the World of {genre} with These Fan Favorites!",
                    f"üìΩÔ∏è Explore the Most Loved {genre} Films, Rated by Viewers!",
                    f"üéûÔ∏è Uncover the Highest Rated {genre} Movies, Handpicked for You!"
                ]

                headers_ru = [
                    f"üé¨ –û—Ç–∫—Ä–æ–π—Ç–µ –ª—É—á—à–∏–µ —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑—Ä–∏—Ç–µ–ª—è–º–∏!",
                    f"üçø –¢–æ–ø–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –ø–æ –º–Ω–µ–Ω–∏—é –∞—É–¥–∏—Ç–æ—Ä–∏–∏!",
                    f"üé• –ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä {genre} —Å —ç—Ç–∏–º–∏ –ª—é–±–∏–º—ã–º–∏ —Ñ–∏–ª—å–º–∞–º–∏ –∑—Ä–∏—Ç–µ–ª–µ–π!",
                    f"üìΩÔ∏è –ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}, –ø–æ –æ—Ü–µ–Ω–∫–µ –∑—Ä–∏—Ç–µ–ª–µ–π!",
                    f"üéûÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —Å–∞–º—ã–µ –≤—ã—Å–æ–∫–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!"
                ]

                # Select random headers
                header_en = random.choice(headers_en)
                header_ru = random.choice(headers_ru)

                # Prepare the message text
                message_text = (
                    f"*{header_en}\n\n{header_ru}*\n\n"
                )
                for movie_data in movie_data_list:
                    message_text += (
                        f"> **{movie_data['title_en']} ({movie_data['year_en']})**\n"
                        f"> **{movie_data['title_ru']} ({movie_data['year_ru']})**\n"
                        f"> üçø **IMDB:** {movie_data['rating']}\n"
                        f"> üé¨ [Trailer]({movie_data['trailer_url']})\n"
                        "------------\n"
                    )

                # Add channel link
                message_text += (
                    "\n\nüì∫ [Cinemates](https://t.me/cinemates_og)\n"
                )

                # Send the message
                await update.message.reply_text(message_text, disable_web_page_preview=True, parse_mode='Markdown')
            else:
                await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö.')
        else:
            await update.message.reply_text('–ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞.' if not is_random else '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.')
    except Exception as e:
        await update.message.reply_text('–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –≤–≤–æ–¥.')